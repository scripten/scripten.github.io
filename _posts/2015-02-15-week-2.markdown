---
layout: post
title: "Week 2: Programming the Web (JavaScript)"
date: 2015-02-15
categories: coding
---

<script>
button1up = new Image; button1up.src = "{{ site.url }}/assets/w2-button.png";
button1down = new Image; button1down.src = "{{ site.url }}/assets/w2-button1.png";

function MouseOverRoutine(ButtonName) {
  if (ButtonName=="button") 
    {document.button.src = button1down.src;}
}

function MouseOutRoutine(ButtonName) {
  if (ButtonName=="button") 
    {document.button.src = button1up.src;}
}
</script>


<script>
var div = document.createElement('div');
div.textContent = "Nice catch";
div.setAttribute('class', 'note');
document.body.appendChild(div);
</script>

Your Friendly Neighborhood Web Coder
=========================================

If it's not apparent from the title of this post, JavaScript is toted by its creators as "the Programming Language of the Web". With its roots in client-side scripts run from web pages, JavaScript has grown to take on a great number of other applications, including game development, server-side web applications, and desktop widgets.  Like Python (and, for that matter, Java), JavaScript is a multi-paradigm programming language, employing various programming paradigms. One can write using imperative, object-oriented, and functional concepts in the same application, depending on the program's needs. As is my newly established tradition, let's start by covering where I'm coming from with respect to the language, both to illustrate the level of experience behind this blog post as well as to give any newcomers an idea of where to start while learning alongside. (I would actually not recommend doing the latter, since learning from someone brand new to the language may influence poor choices due to unavoidable ignorance of it!) As I mentioned, I have experience with Java and Python, both of which share some similarities with JavaScript. Despite their names, Java and JavaScript share no modern lineage. My web design experience is very rusty as, while I can read both HTML and CSS without trouble, I'm hardly fluent in their syntax. JavaScript's close relationship with the web is one of my primary reasons for choosing it and its relatively forgiving learning curve will serve as quite the reprieve after [last week](http://scripten.github.io/coding/2015/02/08/week-1.html)!

Having done the requisite googling and reading, I feel pretty confident about hopping in and getting to work with some introductory literature to JavaScript. My first choice is the w3schools.com JavaScript tutorial. They begin with a short overview of the general applications of the language, specifically its prevalence on the net, which should come as no surprise to anyone reading this post, considering how often I seem to be mentioning it! While the background is appreciated, I'm happy to see code examples coming my way by the end of the page. (Since JavaScript is run straight from the body of an HTML page, it's quite easy to see working examples!) We soon move on to learn that JavaScript runs on functions and events. A function being the familiar, presumably imperative, block of code run when an event (probably an interrupt of some sort) occurs. These functions can be placed in either the head or body of an HTML source file, and the tutorial recommends placing it at the end of the body to avoid having script elements block pure HTML display. Loading external scripts via the `<script src = [script]></script>` HTML tags works similarly enough to imports to make me pretty comfortable, though no doubt I will eventually discover differences. (Aha, there it is, just a few lines down. External script files can't contain these tags, so it's not the same concept at all.)

Unlike programming languages designed to be run locally, JavaScript doesn't include any traditional print, stream, or display functions. The most basic output is centered on writing to popups and HTML displays. (Printing to the browser console is probably the closest thing to "debug" console output like what I'm most used to.) Literals and variables are fairly identical to other imperative languages, with the most viable comparison to my experience being Python. For instance, both use duck typing, which is essentially "if it quacks like a duck, it might as well be a duck." Syntax is, of course, slightly different, but it's similar enough to make me fairly comfortable. JavaScript statements are just instructions and programs are merely collections of statements. Statements are semicolon-delimited, though this seems to be a loose requirement. Keywords appear to be bog-standard, which is always a nice perk. Data types are likewise easily recognizable. We have the following types:

	var length = 16;                               // Number
	var lastName = "Johnson";                      // String
	var cars = ["Saab", "Volvo", "BMW"];           // Array
	var x = {firstName:"John", lastName:"Doe"};    // Object

Defining an object within the var statement is pretty elegant. I will have to investigate whether arrays are pure arrays or lists. (With my experience in Python, I would definitely prefer lists in a scripting language like this.) Data types are likewise dynamic, meaning that the same veriable can be reassigned as any data type further down the line. For careful coders, this is very useful, though poor programming practices can come back to bite the distracted programmer in their metaphorical behind. One fairly big difference between JavaScript and other similar languages is the lack of disparate number data types. JavaScript only implements 64-bit floating point numbers, rather than integers, longs, and the like. Checking if a value is very simple, which is a nice change from the usual. The NaN ("Not a Number") value is returned if numerical operations are performed on a value that is not a number. This can be checked against, as well. Control structures (`for`s, `while`s, and `if/else`s) are all very similar to Java in syntax.

Just a Prototypical Guy
=======================

JavaScript objects are simple enough. They, as in other object-oriented languages, contain a number of values and methods to hold and manipulate data. Accessing data values can be done using either `object.value` or `object["value"]` syntax. Methods are called using the exact same syntax as in Java or Python, with `object.method()`. As with Java's wrappers, JavaScript has ways to perform operations, using methods, on primitive values, so, while there is a String object, using the primitive data type is preferable, as they require less memory and still allow for methods to operate on them. Also similar to Java, the keyword for defining properties of objects in their definitions is `this.[property]`, which is pleasantly familiar.

I am less familiar with the type of inheritance JavaScript uses. Called "prototypal inheritance", it works by the programmer creating an object of the type they wish to use. This is called the prototype (very creative, I know) and it can be inherited from by other objects. When a property is requested from any object, JavaScript checks if the object has the property, then moves up the chain of inheritance to see if one of them have it. (This is somewhat like the super keyword in Java in a way, though it is recursive and functionally/conceptually removed.) It is important to note that JavaScript does *not* have classes. There's a very good explanation of the way prototyping in JavaScript works [here](http://zeekat.nl/articles/constructors-considered-mildly-confusing.html).

A defining difference in JavaScript, in comparison to what I'm used to, is the variable scope behavior it uses. Rather than having block-specific scope, JavaScript uses function scope, which means that the following code is perfectly legal in JavaScript:

    var a = 5;

    if(someOtherVariable) {
      var b = 10; // Even though b is in a code block, it is still in the function scope!
    }

    var c = a + b // c is now 15

JavaScript also uses the concept of labels, which act as identifiers for blocks of code. This allows the use of break statements outside the context of loops and switches. (This is very strange to me and smells a little like bad programming practice. I will have to look into this more closely later on.) Typechecking also has a bit of strangeness to it. The typeOf operator reminds me of the `:t` command from Haskell's live interpreter, which returns the type of the statement that follows. In JavaScript, typeOf returns whether a value is one of several data types, such as "number", "boolean", and the like. Unfortunately, without any sort of class implementation, all objects return the same type. (Unsurprisingly, the type it returns is "Object".) Then there's the fact that the "null" object is, well, an object, so type-checking "null" returns "Object." To get around this, there is also the "Undefined" type, which, like "null", does not have a value associated with it, but in this case it returns a unique type. Converting values between types is fairly simple, though, since most simple types have conversion methods associated with them. JavaScript also automatically attempts to convert values to the "correct" type, though, obviously, this can lead to unexpected results if not closely monitored.

The "hoisting" of declarations is yet another new concept for me. In JavaScript, all variable declarations in an environment are hoisted, or brought up to the top of the environment. This means that a variable can be "used" before it is declared. It's important to note that this does not include initializations, so trying to read a variable's value will return an undefined value. To be brutally honest, while the feature seems useful, I can really only see it as being a crutch likely to come back and bite developers in the behind later on.

To combat potential problems, JavaScript provides a "use strict" command, both for global and local scope, that requires following of good programming practices. Normally, errors are not thrown for potentially disastrous situations. With strict mode, JavaScript will throw errors when a number of statements are used, such as trying to write to a getter-only property or to a property that doesn't exist, trying to use two properties with the same identifier, and a number of other common problems that are ignored by the normal JavaScript parser.

DOMestic Policy
===============

JavaScript's inherent web-friendliness comes in its integration with the markup language HTML. Events, as noted before, are essentially interrupts that call JavaScript code to modify or respond to something that is happening, such as the user clicking on a button or an HTML page finishing loading. JavaScript can access HTML elements easily and vice versa, supporting an environment in which the two closely work together. Dealing with the DOM (That's the Document Object Model, a tree structure used for defining web pages) is an integral part of using JavaScript. Unless your goal is to do nothing but output to the console, the web page is your go-to medium for self-expression. JavaScript makes this easy.

The little example button below (initial code courtesy of EchoEcho.com's [animated button tutorial](http://www.echoecho.com/jsbuttons02.htm)) is accomplished with a mix of HTML and JavaScript.

<a href="{{ site.url }}" onmouseOver="MouseOverRoutine('button')" onmouseOut="MouseOutRoutine('button')">
<Img Src="{{ site.url }}/assets/w2-button.png" name="button" ></a>

The HTML looks like this (You can view the code on this page itself by using your browser's features, too.):

	<a href="{{ site.url }}" onmouseOver="MouseOverRoutine('button')" onmouseOut="MouseOutRoutine('button')">
	<Img Src="{{ site.url }}/assets/w2-button.png" name="button" ></a>

And the JavaScript looks like this:

    <script>
    button1up = new Image; button1up.src = "{{ site.url }}/assets/w2-button.png";
    button1down = new Image; button1down.src = "{{ site.url }}/assets/w2-button1.png";

    function MouseOverRoutine(ButtonName) {
      if (ButtonName=="button") 
        {document.button.src = button1down.src;}
    }
	
    function MouseOutRoutine(ButtonName) {
      if (ButtonName=="button") 
        {document.button.src = button1up.src;}
    }
    </script>

To talk of JavaScript, it is important to note the way the web works. (At least right now.) We have our simple static HTML, JavaScript for slightly more complex interactions with the user, AJAX (Asynchronous JavaScript and XML) for pulling in new data from the web server, and JSON (JavaScript Object Notation, a metadata language similar to XML) for passing information such as JavaScript objects as strings. Of course, web browsers are also a consideration. In the same way that all programmers must pay attention when developing for multiple platforms simultaneously, so too must browsers be taken into account, as they are not a monolithic group. Sometimes, they expect entirely different syntax for performing the same operations. To help alleviate this, the jQuery library exists to act as a buffer. I won't be including it on this page, as it is a fairly large file, but you can download it at [the jQuery homepage](http://jquery.com/download/). (Perhaps another week, I'll come back to learn jQuery in more depth.) More recently, there has also come a major update in the way of the HTML5 canvas element API, which allows for JavaScript to render drawing functions in JavaScript. The following animation is just a simplistic look at what it is capable of (Notably, this is not a .gif files with an animation, but a script running in your browser. Take a look at this page's source to see the script itself.):

<canvas></canvas>
<script>

// Get the canvas element from HTML5 and set the context
canvas = document.querySelector('canvas'),
ctx = canvas.getContext('2d');

// Create an object to hold our image, locating in the assets folder
var imageObj = new Image();
imageObj.src = "{{ site.url }}/assets/w2-button.png"

// Set the size of the canvas
var resize = function () {
  canvas.width = 500;
  canvas.height = 100;
};

// Add a listener, which waits for the page to load, then runs the provided function
window.addEventListener('load', function () {
  resize();

  // Set up a place to hold position and speed
  var pos, vel;
  pos = {
    x: 64,
    y: 64
  };
  vel = {
    x: 1,
    y: 1
  };

  // Refresh the canvas by clearing and redrawing the canvas
  var loop = function () {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    pos.x += vel.x;
    pos.y += vel.y;
    // If the image gets too close to the side, make it "bounce" off
    if (pos.x < 32 || pos.x > canvas.width - 32) {
      vel.x *= -1;
    }
    if (pos.y < 32 || pos.y > canvas.height - 32) {
      vel.y *= -1;
    }
    // Draw the image in its new position
    ctx.drawImage(imageObj, pos.x - 32, pos.y - 32);
  };
  setInterval(loop, 2000 / 60);
});
</script>

Further Reading
===============

JavaScript is a unique language with its roots in a different part of the software development sphere than what I'm used to. That being said, many of the paradigms evident in the language are evocative of others that I've used before. Syntactically, there's nothing scary in JavaScript to the Java/Python/C-based programmer. Some of the allowances that JavaScript makes might promote poor practices, but strict mode and just being observant of your own code can easily mitigate that. The most important aspect of JavaScript is its integration with the web. To accommodate for this, there are a number of libraries and structures that are important for pulling the full power out of it. Learning jQuery and other APIs like node.js are a natural progression from the basics of JavaScript. (Due to the extra power afforded by jQuery, it looks to be as effective to learn as a new language in and of itself.)

Onwards!
========

Week One of this blog focused on the functional language Haskell. This week being web-based JavaScript, I'm thinking it's time to learn something aiming at a different subset of the programming world. C# is a modern, general purpose language developed by Microsoft for its .NET framework. With my experience using C# limited to a few scripts here or there, I've decided to move deeper into the language and learn it more fully.

Thanks, as always, for reading and hope to see you next week while I tackle C#!
