---
layout: post
title: "Week 1: Get Set, Go! (Haskell)"
date: 2015-02-8
categories: coding
---

First Impressions
=================

When I am learning something new, my first steps are generally to do a bit of research into the subject. Rather than getting my hands dirty immediately, I like to have an idea of what I'm looking at. Glossing over discussions of Haskell, I started noticing that they split into two flavors. On the one hand, there were people who came from imperative programming backgrounds, who saw Haskell as something new, terrifying, and powerful if harnessed carefully. On the other hand, there are the Haskell initiates, treating it with significant reverence and telling everyone in earshot of the unfathomable potential they could garner if they would just adopt Haskell. Not unlike the High Priests of Cthulhu, in that regard.

!["cthulhu.fhtagn()"]({{ site.url }}/assets/w1-cthulhu.jpg "Your documentation is the *real* abomination here. Art (c) Dennis McCorry (http://h080j1m.tumblr.com/) Used with permission")

I started with some works regarding the legitimacy of functional programming as a whole. Firstly, the student chapter of the ACM at Washington University, St. Louis, MO hosts a small, easy-to-read website that acts as an introduction to functional programming, [Adventures in Functional Programming](https://acm.wustl.edu/functional/index.php). Their article "Why Study Functional Programming? ...or, why make programming even harder?" details precisely what it says on the tin.

Starting with a short look at Scheme, a Lisp-based language, then moving on to Haskell, it compares and contrasts a number of features between the two. Haskell, it seems, is a statically-typed language (allegedly different from statically-typed Java or C++) with built-in pattern matching and currying (that is, taking a function that supports a tuple of arguments and splits it into several single-argument functions) as well as support for monads (functional assembly lines) and a method-centric typeclass system. They say that learning Haskell shouldn't be too hard (hooray!), but that reaching an advanced level of competence with it requires things like the lambda calculus, combinators, and category theory.

At the bottom of the article, the WU ACM chapter generously lists a few links that act both as a deeper introduction to Haskell as well as giving justification for becoming proficient with it. ["Why Haskell?"](http://scienceblogs.com/goodmath/2006/11/26/why-haskell/), a post by Mark C. Chu-Carroll on ScienceBlogs.com, starts in familiar territory. "Haskell is valuable because it forces you to think about programming in a new way," he says. Further down, the heavy hitter comes out to play. His analogy is that Haskell is a language that works well as "glue", that is, it asks the programmer to make a bunch of primitive functions and then it glues them together and makes them work. Coming from a nearly exclusively imperative background, I can see the value here. The last fourth of the post shows an implementation of a quicksort algorithm. This is my first experience with a Haskell program, and it's not terrifying. Rather, it is exceedingly elegant, and I've transcribed it below just to show how elegant it is.

    quicksort :: (Ord a) => [a] -> [a]  
    quicksort [] = []  
    quicksort (x:xs) =   
      let smallerSorted = quicksort [a | a <- xs, a <= x]  
        biggerSorted = quicksort [a | a <- xs, a > x]  
      in  smallerSorted ++ [x] ++ biggerSorted

That's all of six lines, and relatively easy-to-understand ones, at that. In the interest of space, I'll forego explaining this code, but the link above to "Why Haskell?" leads straight to the programmer's own description. (Note: Since first writing this, I found that the original code provided at "Why Haskell?" doesn't actually work. I've replaced it with code from a later source.)

After covering these articles, I went on to look at a few more, just to get an idea of what I was getting into. I'm not going to cover those in any detail, but they should be easy enough to find for anyone who wants to follow in my errant footsteps. A bit of Google-fu should do the trick.

Testing the Waters
==================

With the introductory bits finished, I move on to getting Haskell up and running on my own box. The Haskell platform seems to be the standard way to go about desktop development, so I grab that from my distro's package manager. It's pretty big, so while I wait for it to finish, I take a look around the [Haskell wiki](https://wiki.haskell.org/Haskell_in_5_steps) and [Try Haskell](http://tryhaskell.org/) shows up right under the reference to the platform. The site is clean and it offers a tutorial. Typing "help" in the prompt starts it up, a textbox on the side becoming an interactive tutor. The first few steps are relatively painless; very similar in syntax to Python, if I'm being honest. The sorting function shows itself to be pretty robust, which is unsurprising considering the claims of those introductory articles.

Some examples here:

    > sort [42,13,22]
    [13,22,42]
    
    > sort "Kevin"
    "Keinv"

Moving on, I start to see some of the functional aspects of the language:

    > let x = 4 in x * x
    16
    
    > let x = 8 * 10 in x + x

The let command binds something to a variable. The syntax here goes like this: `let var = expression in body`
That means that the variable is bound to the expression and executed in the body. Nothing too serious yet, but the syntax is growing on me. Performing a number of different operations is, well... elegant. Take a look at how easy it is to iterate through a list and perform operation on each element:

    > map (*99) [1..10]
    [99,198,297,396,495,594,693,792,891,990]
    
    > map (/5) [13,24,52,42]
    [2.6,4.8,10.4,8.4]
    
    > filter (>5) [62,3,25,7,1,9]
    [62,25,7,9]

Since the tutorial link is right up above, I'm not going to summarize the rest of it. (Boy, this is turning into a theme, isn't it?) Suffice to say that, after roughly ten minutes of working on the tutorial, I am pattern matching without trouble. Again, quite elegant!

Knee Deep in the Dev
====================

While I've been reading around, repeated mentions of a free online book have been popping up. ["Learn You a Haskel for Great Good"](http://learnyouahaskell.com/) looks to be the go-to source for getting a decent introduction to the language. Illustrated with bright colors and cute pictures, it kind of makes me think of "baby's first Haskell", which is just what I need! (Actually, the writing is not condescending in the least and doesn't skimp on the details.)

With the Try Haskell tutorial under my belt, the basic functionality of Haskell is already there for me to reference. However, "Learn You" starts by working with the desktop environment, both in a live interpreter and with compiled *.hs files. We start by making functions and gluing them together to make bigger ones. It's all very iterative, like programming with building blocks.

Here's where baby.hs starts off (Note that I've omitted the > prompt here to denote that this is part of a file and not input to an interpreter.):

    doubleme x = x + x
    
    doubleus x y = doubleme x + doubleme y
    
    doubleSmallNumber x = if x < 100 then x*2 else x
    
    doubleList = [doubleme x | x <- [1..10]]
<p></p>
Some explanation of that last one is in order. The function doubleList takes a list, then essentially iterates over the list, using the doubleMe function on each element as it processes the list into a new one. Lists are immutable in Haskell and lists are also very common. As in C++ where strings are arrays of chars, in Haskell, strings are lists of chars. This lets you do some pretty impressive things with strings, since Haskell has a great selection of functions for working with lists.

Eventually, we make it to our first real solution. Presented with the problem of finding a right triangle, with sides of length 10 or less, with a perimeter of 24, we do the following:

    > let triangles = [ (a,b,c) | c <- [1..10], b <- [1..10], a <- [1..10] ]
    > let rightTriangles = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2]
    > let rightTriangles' = [ (a,b,c) | c <- [1..10], b <- [1..c], a <- [1..b], a^2 + b^2 == c^2, a+b+c == 24]
<p></p>
The first line is fairly self-explanatory. We define a triangle using a triple tuple, with each element of the tuple standing for a side of the triangle. Then we add a layer on top and define rightTriangle as the same thing, but using the Pythagorean theorem as a filter on our triangles. Finally, we add another filter, requiring that the perimeter of the triangle is 24. For a more detailed look, "Learn You a Haskell" is linked above.

Let's Get Let's Get Recursive
=============================

Even programmers used to working with imperative or object-oriented languages should be no strangers to the concept of recursion. Most introductory lessons in any language bring in recursion for solving problems that are more difficult to solve iteratively. In functional programming, with its deep interconnectivity with mathematics, recursion is even more natural. (Really, without control structures like loops, there's no way to avoid it in serious projects.) "Learn You a Haskell for Great Good", in its section on it, says, "Recursion is important to Haskell because unlike imperative languages, you do computations in Haskell by declaring what something *is* instead of declaring *how* you get it."

When using recursion, checking your cases is imperative. (See what I did there?) We have to be able to tell where the recursion ends, after all, and also how to distinguish between the results given by various inputs. The basics of dealing with this in Haskell are relatively similar to those in imperative languages. Guards are the first way I learned to deal with this. Guards are, essentially, syntactic sugar for numerous nested if-else statements or switch statements. To see the difference, I've compiled two examples.

The first is done using if-else statements:

    describeLetter :: Char -> String
    describeLetter c =
        if c >= 'a' && c <= 'z'
            then "Lower case"
            else if c >= 'A' && c <= 'Z'
                then "Upper case"
                else "Not an ASCII letter"

And the second using guards:

    describeLetter :: Char -> String
    describeLetter c
       | c >= 'a' && c <= 'z' = "Lower case"
       | c >= 'A' && c <= 'Z' = "Upper case"
       | otherwise            = "Not an ASCII letter"

Guards are used in a top-to-bottom fashion, with that "otherwise" statement at the end always evaluating to "true" such that the function always returns something. (It's important to note that if-else statements have their uses, as they are considered expressions while guards are not. This means that simple if-elses are more versatile, though guards can be placed in let and where definitions to produce similar results.) Other examples of control structures can be found [here](http://en.wikibooks.org/wiki/Haskell/Control_structures).

New World Higher Order Functions
================================

Haskell functions only take a single parameter. When I first read about this, it surprised me greatly. After all, there are plenty of functions I've used already that have taken more than one. Apparently, the answer to this comes in the form of curried functions. This essentially means that functions that take more than one argument are actually a series of multiple functions which pass arguments down the line as they evaluate. That is, these functions take other functions as their parameters and are referred to as higher order functions. That's why function definitions look like this:

    function :: (Num a) => a -> a -> a

The last `a` in that definition is technically what is returned, but is not explicitly differentiated from the parameters. This is because each parameter returns a function that takes the next parameter in line as input. That is, a string of single parameter functions are created and evaluated. This leads to some very interesting potential applications of functions. For example, the following function takes another function and applies it to two lists. So not only can you use a function with various input values, but you can apply different functions within a higher order function just by using them as a parameter!

    zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]  
    zipWith' _ [] _ = []  
    zipWith' _ _ [] = []  
    zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys 

There are also a number of ways to modify how Haskell handles functions. The first I came across was the `$` function. `$` is the function application, and it acts as a way to make code more readable by changing functions from left-associative `((a -> a) -> a)` to right-associative `(a <- (a <- a))`. This has the benefit of making code like the following possible:

    quicksort $ zipWith max [3,2,3] [5,3,2]

Though this only eliminates one set of parens from `quicksort (zipWith max [3,2,3] [5,3,2])`, the concept is easily scalable. Of particular interest is the fact that the function application is treated like any other function, so things like `map ($ 3) [(4+), (10*), (^2), sqrt]` are possible, where 3 is applied to each of the functions in the second parameter and mapped into a new list containing each result.

Function composition (f over g of x, for instance) is commonly used to designate a function, f, which takes the result of another function, g, when x is applied to g. Haskell supports these with the `.` function. (Known, unsurprisingly, as the function composition.) As with function application, function composition is right-associative, so code readability can also be improved using function composition. The terms pointless or point free style refer to defining a function in such a way that terms on both sides of the definition are omitted: `sum = foldl (+) 0` as opposed to `sum xs = foldl (+) 0 xs`. Point free style is nice because it avoids excessive parens, which can make code ugly and tough to decipher. Using function composition allows for definitions like the following:

    fn = ceiling . negate . tan . cos . max 50

This is much cleaner than the alternative (four trailing parens better, in fact!):

    fn x = ceiling (negate (tan (cos (max 50 x))))

Using both function application and composition allows for shorter, cleaner, and more elegant code.

Zapped with the Modulator
=========================

Much like packages in Java and equivalents in nearly every other programming language, Haskell provides a way to parcel up functions for ease of use. Unlike its contemporaries, modules, Haskell's system, are meant to be collections of useful functions that work together or on similar concepts. The concept is so ingrained into the methodology of the language that a search engine is provided for finding modules, [Hoogle](https://www.haskell.org/hoogle/), which works differently from other API documentation that I've seen in that it is searchable by name, module name, or type signature for just the right function. Definitely a step away from object-oriented programming.

"Learn You a Haskell" covers the standard modules that come with an installation of the language in some detail. Along with Prelude, the Haskell standard library's default module, there is also Data.List, Data.Map, Data.Char, and Data.Set, among many others, all with functions meant to work with their respective concepts. Making new, custom modules is fairly easy, as well. A simple definition as follows defines my new module "Cipher":

    module Cipher
    ( encode
    , decode
    ) where

Assuming that the functions encode and decode appear in the script file, Cipher can now be loaded up and used to create simple encrypted strings. Notably, in the interest of encapsulation, only those functions defined in the module definition are "exported". Essentially, exporting a function makes it public, allowing the creator of the module to create utility functions galore, but only open up those that act as an interface to the module. Haskell also allows for hierarchical structures for modules, merely by placing module files into appropriately named folders.

Typeclass A Personality
=======================

Haskell not only provides functionality for defining modules, but also allows the programmer to define their own data types and, for that matter, their own typeclasses, which act as a sort of interface for defining types. Defining a data type allows you to create a template for how data is represented. This is similar, in a sense, to creating instances of objects in object-oriented languages. For example, defining a data type for a person's information (First and last name along with height) could be accomplished with this (deriving (Show) means that we want strings back):

    data Person = Person String String Int deriving (Show)

Defining ways to access this information is accomplished using what is called "record syntax":

    data Person = Person { firstName :: String
                         , lastName  :: String
                         , age       :: Int
                         } deriving (Show)
<p></p>
What's useful here is that functions are automatically created to access the information from this data type. Likewise, the meanings of the fields are made explicit, which is very useful when working with arbitrary data types that could contain just about any kind of information.

Typeclasses are not like classes in object-oriented languages. This is important to remember. they act instead as interfaces, defining what data types act like rather than as classes which are then instanced into objects that contain data. A data type that can be ordered is thus defined as part of the Ord typeclass and so on. Above, we said that Person derives Show, which is a typeclass that states that all data types within it can be represented as strings and thus printed. Along with Typeclasses, which define what data types do, we also have type synonyms. Type synonyms are purely for the sake of code legibility. They define a particular value as a "type" so that the value has more information.

    type PhoneNumber = String
    type Name = String
    type PhoneBook = [(Name,PhoneNumber)]

Now we have two strings that are called PhoneNumber and Name, which are used to define PhoneBook. That's a lot more sensible than [(String, String)]!

Reaching the End and a Little Retrospective
===========================================

It's around this point where the week seems to have run out on me. I feel like I've covered a large part of the language, but there's still much more to learn. I'll definitely have to make a note to come back and study the language more later on. With several chapters left of "Learn You a Haskell" and a few more tutorials to read, there's no shortage of documentation available. The hardest part of Haskell has been adjusting my brain to process the language more naturally. I still find myself coming back to my imperative roots to figure out problems. That being said, the functionalfoundations have shown some great strength, notably in the implementation that Haskell has opted for. Lazy evaluation, for one thing, solves significant problems with little need for the programmer to think up workarounds. While I won't be adopting Haskell for my major programming projects any time soon, further pushes into it should certainly prove beneficial.

Next week I'll be focusing on the programming language of the web, Javascript! I've decided to pursue a web-centric language because my current skillsets are in languages which are almost wholly traditional, C/FORTRAN-lineage beasts. Expanding to the web will give me a look at a different side of coding, though not quite so alien as Haskel has been.

Thanks for reading and see you next week!
