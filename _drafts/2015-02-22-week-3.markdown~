---
layout: post
title: "Week 3: Getting the Point (C#)"
date: 2015-02-22
categories: coding
---

.NETscape Navigating
====================

C# development seems like it would be mostly relegated to Windows boxes. The .NET framework, which the language is built on, was developed by Microsoft as a part of its .NET intiative back in 2002. That being said, a number of tools are available for programming in C# on other platforms, including Linux, which I personally use for most of my development needs. [Mono](http://www.mono-project.com/), for instance, provides an open source set of tools for C# development. Since the bulk of my experience with C# lays within the realm of Unity development, I'll need to essentially start from scratch, which is a useful place to be when first learning a language. Employing libraries is not bad practice, but the fundamentals of a language can often get hidden under the abstraction that otherwise makes these additional resources that much more convenient and powerful.

Thankfully, it's very easy to install the Mono development kit and I have it working within roughly ten minutes. (Issues with the school's wifi notwithstanding.) Before I start looking for educational resources, I take a look at the "Hello world" implementation provided for testing the Mono installation:

	using System;
	 
	public class HelloWorld
	{
	    static public void Main ()
	    {
	        Console.WriteLine ("Hello Mono World");
	    }
	}

Anyone familiar with Java would find this code exceptionally familiar. Change just a few bits of syntax and one could compile this code to run on the JVM. Using Mono on Linux proves to be as simple as any other compiled language I've run on the OS. From here, it looks like the best path to follow is that of the distinguished Master Tutorial. The first place I find is the [C# Station](http://www.csharp-station.com/tutorial.aspx), which has what looks like a robust series of tutorials contained within.

I Can C Similarities Here
=========================

Every language has its quirks, however murky the apparent motivations for those design decisions may be. One of the quirks that trips up many newer Java developers is the requirement for class names to (sometimes, but not always!) match filenames. In C#, the designers chose to follow the freeform naming requirements of the C++ branch of C derivatives. (That is, a general lack of requirements.) That being said, most other differences are superficial at best. The usage of namespaces in C#, as opposed to Java's packages, are distinct only in the usage versus import keywords, though there are likely siginificant differences under the hood and when dealing with more complex situations. Public and static declarations are familiar and comfortable, and the syntax for console operations is likewise wholly obvious at a glance. I could go on about the similarities and minor differences for a while, but I feel like it's prudent to move on to more interesting topics.

First, let's take a look at primitive types. Boolean values are bog standard, but there are nine (counting chars) types of integer types, as well as the double and float types. (C# also has a 128-bit decimal type used for avoiding those pesky rounding errors that floats run into all the time.) Strings, which look to be objects rather than arrays of character, are relatively similar to other C-derivative languages' implementations. The `@` verbatim literal is rather interesting, though. Using `@` allows a coder to define a string without having to worry about escape characters, making code more readable. A small feature, but convenient and aesthetically pleasing. C# also supports a wide variety of array types, including multi-dimensional and jagged arrays. (Moving to a language without the former can be quite the test when you're used to using them liberally!)

Methods to the Madness
======================

C# methods definitely show some close similarity to Java. There are, however, some differences and additional features. Normally, like in Java, primitive data types are passed by value. However, C# sports a number of parameters for method arguments. The first, `out`, allows for side effecting to take place. A method with an `out` value cannot return until that variable has been assigned. The next, the `ref` parameter, passes values by reference. Lastly, the `params` parameter implements a way to have a variable number of arguments passed to the method. Each of these appears useful in its own way and I can see myself missing them when using other languages.

The Challenge
=============

Having spent a few weeks working on this blog, I've been working on making it more useful both as a tool for my own learning and as a potential reference for others. Recently, I've discovered the site [CodeEval](https://www.codeeval.com), a coding challenge site with weekly challenges and tons of information about the software development world. Due to the great range of challenge difficulties, using CodeEval as a source for checking my skill with my language of the week seems like a no-brainer. As with all things, this is liable to change depending on how well it works, but at least this week, I'm going to be giving it a shot.

Since this is my first week with these languages, going for the easier challenges seems like a good target to aim for. This week, I'm going to start with the FizzBuzz challenge, which, surprisingly, only has a roughly 50% success rate. The idea is simple. Three integers are given as input, X, Y, and N. X and Y are the Fizz and Buzz divisors divisors, respectively. N is the integer to count up to. For each integer up to N, the number is printed if it is not divisible by X or Y. If it can be divided by X, "Fizz" is printed. Alternatively, "Buzz" is printed if it can be divided by Y. If both of these divisors pass, we print "Fizzbuzz." Pretty simple. (It is, after all, allegedly based on a playground game.)

Here's my implementation, in C#:

    // This is where we get our dependencies
    using System;
    using System.IO;

    // Declare the class here
    public class FizzBuzz {

      // Static methods are pretty much exactly the same as in Java
      static public void Main (string[] args) {
        try {
          // Open up a scanner object on our provided file
          using (StreamReader sr = new StreamReader(args[0])) {
            string line;
            while((line = sr.ReadLine()) != null)
              fizzBuzz(line);
          }
        } catch (Exception e) { // This catches file access errors
          Console.WriteLine("File could not be accessed");
          Console.WriteLine(e.Message);
        }
      }
      
      // This is a static utility method private to this class.
      static private void fizzBuzz(string input) {
        // String manipulation is pretty standard and powerful. (There's also the
        // System.Linq library, which adds a lot of additional functionality.)
        string[] parts = input.Split(' ');
        int X = 0;
        int Y = 0;
        int N = 0;
        if(parts.Length > 3)
          Console.WriteLine("Error: Malformed Line \"" + input + "\"");
        else { // Strings can be parsed to any of the available number types
          X = Int32.Parse(parts[0]);
          Y = Int32.Parse(parts[1]);
          N = Int32.Parse(parts[2]);
        }
        // This is a simple and readable solution to the problem. (It is likely not
        // the most efficient, but we're still talking linear O(n) runtime.)
        for(int i = 1; i <= N; i++) {
          if(!(i % X == 0 || i % Y == 0))
            Console.Write(i);
          if(i % X == 0)
            Console.Write("F");
          if(i % Y == 0)
            Console.Write("B");
          Console.Write(" ");
        }
        Console.WriteLine();
      }
    }

Next Week
=========

This coming week is going to be an interesting one! I'm off to nearby Rochester, NY for an amateur game jam, so I will not be around come next sunday. With that in mind, I'll be publishing two weeks from now, rather than just one. (I know, it's kind of cheating!) When that time comes, though, I'll be here with a look at Ruby, touted as a natural and elegant programming language that blends functional and imperative paradigms. Have a good two weeks, everyone, and, as always, thanks for reading!
