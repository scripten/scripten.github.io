---
layout: post
title: "Week 2: Programming the Web (JavaScript)"
date: 2015-02-15
categories: coding
---

Just Your Friendly Neighborhood Web Coder
=========================================

If it's not apparent from the title of this post, JavaScript is toted by its creators as "the Programming Language of the Web". With its roots in client-side scripts run from web pages, JavaScript has grown to take on a great number of other applications, including game development, server-side web applications, and desktop widgets.  Like Python (and, for that matter, Java), JavaScript is a multi-paradigm programming language, employing various programming paradigms. One can write using imperative, object-oriented, and functional concepts in the same application, depending on the program's needs. As is my newly established tradition, let's start by covering where I'm coming from with respect to the language, both to illustrate the level of experience behind this blog post as well as to give any newcomers an idea of where to start while learning alongside. (I would actually not recommend doing the latter, since learning from someone brand new to the language may influence poor choices due to unavoidable ignorance of it!) As I mentioned, I have experience with Java and Python, both of which share some similarities with JavaScript. Despite their names, Java and JavaScript share no modern lineage. My web design experience is very rusty as, while I can read both HTML and CSS without trouble, I'm hardly fluent in their syntax. JavaScript's close relationship with the web is one of my primary reasons for choosing it and its relatively forgiving learning curve will serve as quite the reprieve after [last week](http://scripten.github.io/coding/2015/02/08/week-1.html)!

Having done the requisite googling and reading, I feel pretty confident about hopping in and getting to work with some introductory literature to JavaScript. My first choice is the w3schools.com JavaScript tutorial. They begin with a short overview of the general applications of the language, specifically its prevalence on the net, which should come as no surprise to anyone reading this post, considering how often I seem to be mentioning it! While the background is appreciated, I'm happy to see code examples coming my way by the end of the page. (Since JavaScript is run straight from the body of an HTML page, it's quite easy to see working examples!) We soon move on to learn that JavaScript runs on functions and events. A function being the familiar, presumably imperative, block of code run when an event (probably an interrupt of some sort) occurs. These functions can be placed in either the head or body of an HTML source file, and the tutorial recommends placing it at the end of the body to avoid having script elements block pure HTML display. Loading external scripts via the `<script src = [script]></script>` HTML tags works similarly enough to imports to make me pretty comfortable, though no doubt I will eventually discover differences. (Aha, there it is, just a few lines down. External script files can't contain these tags, so it's not the same concept at all.)

Unlike programming languages designed to be run locally, JavaScript doesn't include any traditional print, stream, or display functions. The most basic output is centered on writing to popups and HTML displays. (Printing to the browser console is probably the closest thing to "debug" console output like what I'm most used to.) Literals and variables are fairly identical to other imperative languages, with the most viable comparison to my experience being Python. For instance, both use duck typing, which is essentially "if it quacks like a duck, it might as well be a duck." Syntax is, of course, slightly different, but it's similar enough to make me fairly comfortable. JavaScript statements are just instructions and programs are merely collections of statements. Statements are semicolon-delimited, though this seems to be a loose requirement. Keywords appear to be bog-standard, which is always a nice perk. Data types are likewise easily recognizable. We have the following types:

	var length = 16;                               // Number
	var lastName = "Johnson";                      // String
	var cars = ["Saab", "Volvo", "BMW"];           // Array
	var x = {firstName:"John", lastName:"Doe"};    // Object

Defining an object within the var statement is pretty elegant. I will have to investigate whether arrays are pure arrays or lists. (With my experience in Python, I would definitely prefer lists in a scripting language like this.) Data types are likewise dynamic, meaning that the same veriable can be reassigned as any data type further down the line. For careful coders, this is very useful, though poor programming practices can come back to bite the distracted programmer in their metaphorical behind. One fairly big difference between JavaScript and other similar languages is the lack of disparate number data types. JavaScript only implements 64-bit floating point numbers, rather than integers, longs, and the like. Checking if a value is very simple, which is a nice change from the usual. The NaN ("Not a Number") value is returned if numerical operations are performed on a value that is not a number. This can be checked against, as well. Control structures (`for`s, `while`s, and `if/else`s) are all very similar to Java in syntax.

JavaScript objects are simple enough. They, as in other object-oriented languages, contain a number of values and methods to hold and manipulate data. Accessing data values can be done using either `object.value` or `object["value"]` syntax. Methods are called using the exact same syntax as in Java or Python, with `object.method()`. As with Java's wrappers, JavaScript has ways to perform operations, using methods, on primitive values, so, while there is a String object, using the primitive data type is preferable, as they require less memory and still allow for methods to operate on them.

JavaScript's inherent web-friendliness comes in its integration with the markup language HTML. Events, as noted before, are essentially interrupts that call JavaScript code to modify or respond to something that is happening, such as the user clicking on a button or an HTML page finishing loading. JavaScript can access HTML elements easily and vice versa, supporting an environment in which the two closely work together.

<a href="{{ site.url }}/assets/w2-button.htm" onmouseOver="MouseOverRoutine('button1')" onmouseOut="MouseOutRoutine('button1')">
<Img Src="w2-button.png" name="button" >
<Img Src="w2-button1.png" name="button1" ></a>
